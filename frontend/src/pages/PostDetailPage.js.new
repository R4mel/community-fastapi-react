import React, { useEffect, useState } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { api } from '../api/client';
import CommentList from '../components/CommentList';
import CommentForm from '../components/CommentForm';

const PostDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [post, setPost] = useState(null);
  const [comments, setComments] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentUser, setCurrentUser] = useState(null);

  useEffect(() => {
    const user = localStorage.getItem('user');
    if (user) {
      setCurrentUser(JSON.parse(user));
    }
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        const [postResponse, commentsResponse] = await Promise.all([
          api.get(`/api/posts/${id}`),
          api.get(`/api/posts/${id}/comments`)
        ]);
        
        setPost(postResponse.data);
        setComments(commentsResponse.data);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError(err.response?.data?.detail || '데이터를 불러올 수 없습니다.');
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchData();
  }, [id]);

  const handleDelete = async () => {
    if (window.confirm('정말 삭제하시겠습니까?')) {
      try {
        await api.delete(`/api/posts/${id}`);
        navigate('/posts');
      } catch (error) {
        console.error('Failed to delete post:', error);
        alert(error.response?.data?.detail || '게시글 삭제에 실패했습니다.');
      }
    }
  };

  const handleCommentSubmit = async (content) => {
    try {
      const response = await api.post(`/api/posts/${id}/comments`, { content });
      setComments([...comments, response.data]);
    } catch (error) {
      console.error('Failed to create comment:', error);
      alert(error.response?.data?.detail || '댓글 작성에 실패했습니다.');
    }
  };

  const handleCommentDelete = async (commentId) => {
    if (!window.confirm('댓글을 삭제하시겠습니까?')) return;
    
    try {
      await api.delete(`/api/posts/${id}/comments/${commentId}`);
      setComments(comments.filter(comment => comment.comment_id !== commentId));
    } catch (error) {
      console.error('Failed to delete comment:', error);
      alert(error.response?.data?.detail || '댓글 삭제에 실패했습니다.');
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-3xl mx-auto p-6">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      </div>
    );
  }

  if (!post) {
    return (
      <div className="max-w-3xl mx-auto p-6">
        <div className="text-center">게시글을 찾을 수 없습니다.</div>
      </div>
    );
  }

  const isAuthor = currentUser && post.user_id === currentUser.user_id;

  return (
    <div className="max-w-3xl mx-auto p-6">
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="flex justify-between items-start mb-6">
          <h1 className="text-3xl font-bold">{post.title}</h1>
          {isAuthor && (
            <div className="space-x-2">
              <Link
                to={`/posts/${id}/edit`}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
              >
                수정
              </Link>
              <button
                onClick={handleDelete}
                className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700"
              >
                삭제
              </button>
            </div>
          )}
        </div>

        <div className="flex items-center text-gray-600 text-sm mb-6">
          <div className="flex items-center">
            <img
              src={post.user?.profile_image || '/default-avatar.png'}
              alt="작성자 프로필"
              className="w-8 h-8 rounded-full mr-2"
            />
            <span className="mr-4">{post.user?.nickname || '익명'}</span>
          </div>
          <div>
            {new Date(post.created_at).toLocaleString('ko-KR', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })}
          </div>
        </div>

        <div className="prose max-w-none mb-8">
          {post.content}
        </div>

        <hr className="my-8 border-gray-200" />

        <div className="space-y-6">
          <CommentForm onSubmit={handleCommentSubmit} />
          <CommentList
            comments={comments}
            currentUserId={currentUser?.user_id}
            onDelete={handleCommentDelete}
          />
        </div>
      </div>
    </div>
  );
};

export default PostDetailPage;
